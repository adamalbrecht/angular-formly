angular.module("formly.render",[]),angular.module("formly",["formly.render"]),angular.module("formly.render").directive("formlyCustomValidation",["formlyUtil",function(a){"use strict";return{require:"ngModel",link:function(b,c,d,e){var f=b.$eval(d.formlyCustomValidation);if(f){var g=e.hasOwnProperty("$validators");angular.forEach(f,function(c,d){if(g){var f=c.isAsync?"$asyncValidators":"$validators";e[f][d]=function(d,e){return a.formlyEval(b,c,d,e)}}else e.$parsers.unshift(function(f){var g=a.formlyEval(b,c,e.$modelValue,f);return e.$setValidity(d,g),f})})}}}}]),angular.module("formly.render").directive("formlyDynamicName",function(){"use strict";return{restrict:"A",priority:599,controller:["$scope","$element","$attrs",function(a,b,c){b.removeAttr("formly-dynamic-name"),c.$set("name",a.$eval(c.formlyDynamicName)),delete c.formlyDynamicName,a.$emit("formly-dynamic-name-update")}]}}),angular.module("formly.render").directive("formlyField",["$http","$compile","$templateCache","formlyConfig","formlyUtil",function(a,b,c,d,e){"use strict";function f(){d.disableWarnings||console.warn.apply(console,arguments)}return{restrict:"AE",transclude:!0,scope:{options:"=",formId:"=?",index:"=?",fields:"=?",result:"=formResult",form:"=?"},controller:["$scope",function(a){function b(){var b=a.options.type;return!b&&a.options.template?b="template":!b&&a.options.templateUrl&&(b="templateUrl"),a.formId+b+a.options.key+a.index}function c(){var b=a.options,c=d();angular.forEach(b.expressionProperties,function(d,f){"data"!==f?b[f]=e.formlyEval(a,d,c):(b.data=b.data||{},angular.forEach(b.expressionProperties.data,function(d,f){b.data[f]=e.formlyEval(a,d,c)}))})}function d(b){return a.result&&(a.options.key||a.index)?(angular.isDefined(b)&&(a.result[a.options.key||a.index]=b),a.result[a.options.key||a.index]):void 0}a.id=b(),angular.extend(a.options,{runExpressions:c,modelOptions:{getterSetter:!0,allowInvalid:!0}}),a.options.runExpressions=c,a.value=d,c(a.result)}],link:function(g,h){function i(a){h.html(a),b(h.contents())(g)}var j=0;if(j+=g.options.template?1:0,j+=g.options.type?1:0,j+=g.options.templateUrl?1:0,0===j)return void f("Formly Warning: template type '"+g.options.type+"' not supported. On element:",h);j>1&&e.throwErrorWithField("You must only provide a type, template, or templateUrl for a field",g.options);var k=g.options.template||d.getTemplate(g.options.type);if(k)i(k);else{var l=g.options.templateUrl||d.getTemplateUrl(g.options.type);l&&a.get(l,{cache:c}).then(function(a){i(a.data)},function(a){f("Formly Warning: Problem loading template for "+l,a)})}}}}]),angular.module("formly.render").directive("formlyForm",function(){"use strict";return{restrict:"E",templateUrl:"directives/formly-form.html",replace:!0,transclude:!0,scope:{fields:"=",options:"=?",result:"=",formOnParentScope:"=name"},compile:function(){return{post:function(a,b,c){a.formOnParentScope=a[c.name]}}},controller:["$scope","$timeout","formlyUtil","$interval",function(a,b,c){function d(b,d){if(angular.isDefined(b.watcher)){var e=b.watcher;angular.isArray(e)||(e=[e]),angular.forEach(e,function(e){var f;angular.isDefined(e.listener)||c.throwErrorWithField("All field watchers must have a listener",b);var g=e.expression||'result["'+b.key+'" || '+d+"]";if(angular.isFunction(g)){var h=g;g=function(){var b=Array.prototype.slice.call(arguments,0);return b.unshift(a.fields[d]),b.push(f),h.apply(this,b)},g.displayName="Formly Watch Expression for field for "+b.key}var i=e.listener;if(angular.isFunction(i)){var j=i;i=function(){var b=Array.prototype.slice.call(arguments,0);return b.unshift(a.fields[d]),b.push(f),j.apply(this,b)},i.displayName="Formly Watch Listener for field for "+b.key}var k=e.type||"$watch";f=a[k](g,i,e.watchDeep)})}}angular.forEach(a.fields,d),a.$watch("result",function(b){angular.forEach(a.fields,function(a){a.runExpressions&&a.runExpressions(b)})},!0),a.$on("formly-dynamic-name-update",function(c){c.stopPropagation(),a.formOnParentScope&&b(function(){angular.forEach(a.fields,function(b){var c=a.formOnParentScope[b.key];c&&(b.formField=c)})})})}]}}),angular.module("formly.render").provider("formlyConfig",function(){"use strict";function a(b,c){"string"==typeof b?e[b]=c:angular.forEach(b,function(b,c){a(c,b)})}function b(a){return e[a]}function c(a,b){"string"==typeof a?f[a]=b:angular.forEach(a,function(a,b){c(b,a)})}function d(a){return f[a]}var e={},f={};this.getTemplateUrl=b,this.setTemplateUrl=a,this.getTemplate=d,this.setTemplate=c,this.disableWarnings=!1,this.$get=function(){return this}}),angular.module("formly.render").factory("formlyUtil",function(){function a(a,b){throw new Error("Formly Error: "+a+". Field definition: "+angular.toJson(b))}function b(a,b,c,d){return angular.isFunction(b)?b(d,c,a):a.$eval(b,{$viewValue:d,$modelValue:c})}return{throwErrorWithField:a,formlyEval:b}}),angular.module("formly.render").run(["$templateCache",function(a){a.put("directives/formly-form.html",'<ng-form class=formly role=form><formly-field ng-repeat="field in fields" class=formly-field options=field form-result=result fields=fields form=formOnParentScope form-id=options.uniqueFormId ng-if=!field.hide index=$index></formly-field><div ng-transclude=""></div></ng-form>')}]);
//# sourceMappingURL=formly.min.map